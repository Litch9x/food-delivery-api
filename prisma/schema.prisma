generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String   @unique
  password  String
  role      UserRole
  avatar    String? // optional
  createdAt DateTime @default(now())

  addresses Address[]
  orders    Order[]
  reviews   Review[]
  cart      Cart?
}

model Restaurant {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  image       String?
  address     String
  phone       String
  createdAt   DateTime @default(now())

  foods   Food[]
  reviews Review[]
}

model Food {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Decimal
  image       String?
  createdAt   DateTime @default(now())

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int

  orderItems OrderItem[]
  cartItems  CartItem[]
}

model Order {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  deliveryAddress   Address @relation(fields: [deliveryAddressId], references: [id])
  deliveryAddressId Int

  status     OrderStatus
  totalPrice Decimal
  createdAt  DateTime    @default(now())

  orderItems OrderItem[]
  payments   Payment[]
}

model OrderItem {
  id      Int   @id @default(autoincrement())
  order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  food   Food @relation(fields: [foodId], references: [id])
  foodId Int

  quantity Int
  price    Decimal
}

model Address {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  street     String
  city       String
  province   String
  postalCode String

  orders Order[]
}

model Payment {
  id      Int   @id @default(autoincrement())
  order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  method    PaymentMethod
  amount    Decimal
  status    PaymentStatus
  createdAt DateTime      @default(now())
}

model Review {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int

  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id     Int  @id @default(autoincrement())
  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  food   Food @relation(fields: [foodId], references: [id])
  foodId Int

  quantity Int
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  DELIVERING
  COMPLETED
  CANCELED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  PAYPAL
  MOMO
  ZALO_PAY
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
